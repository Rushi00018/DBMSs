2..MongoDB - Aggregation and Indexing: 
Design and Develop MongoDB Queries using aggregation and indexing with suitable example using MongoDB.


// Switch to the database
use assignment10;

// Create collection
db.createCollection('student');

// Insert documents
db.student.insert({roll: 1, name: "navin", age: 21, subject_marks: {OOP: 70, DSA: 80}});
db.student.insert([
    {roll: 2, name: "saurabh", age: 19, subject_marks: {OOP: 90, DSA: 85}},
    {roll: 3, name: "aditya", age: 20, subject_marks: {OOP: 82, DSA: 74}},
    {roll: 4, name: "anusha", age: 19, subject_marks: {OOP: 70, DSA: 65}},
    {roll: 5, name: "anurag", age: 20, subject_marks: {OOP: 98, DSA: 95}}
]);

// Display all documents
db.student.find().pretty();

// Create indexes
// Unique index on roll
db.student.createIndex({roll: 1}, {unique: true});

// Simple index on name
db.student.createIndex({name: 1});

// Compound index on subject_marks.OOP and subject_marks.DSA
db.student.createIndex({"subject_marks.OOP": -1, "subject_marks.DSA": -1});

// View all indexes
db.student.getIndexes();

// Sort by name
db.student.find().pretty().sort({name: 1});

// Sort by subject_marks.OOP and subject_marks.DSA in descending order
db.student.find().pretty().sort({"subject_marks.OOP": -1, "subject_marks.DSA": -1});

// Find distinct ages
db.student.distinct('age');

// Group by age and count the number of students in each age group
db.student.aggregate([
    {$group: {_id: "$age", count: {$sum: 1}}},
    {$sort: {"_id": 1}}
]);

// Find the maximum marks in OOP
db.student.aggregate([
    {$group: {_id: "OOP", maxMarks: {$max: "$subject_marks.OOP"}}}
]);

// Find the minimum marks in DSA
db.student.aggregate([
    {$group: {_id: "DSA", minMarks: {$min: "$subject_marks.DSA"}}}
]);

// Calculate the sum of OOP and DSA marks for each student and sort by sum
db.student.aggregate([
    {$project: {_id: "$roll", sum: {$sum: ["$subject_marks.OOP", "$subject_marks.DSA"]}}},
    {$sort: {sum: 1}}
]);
